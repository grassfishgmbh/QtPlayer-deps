diff --git a/src/AVPlayer.cpp b/src/AVPlayer.cpp
index f6021a5..d316d09 100644
--- a/src/AVPlayer.cpp
+++ b/src/AVPlayer.cpp
@@ -702,13 +702,9 @@ void AVPlayer::unload()
 
     if (d->adec) { // FIXME: crash if audio external=>internal then replay
         d->adec->setCodecContext(0);
-        delete d->adec;
-        d->adec = 0;
     }
     if (d->vdec) {
         d->vdec->setCodecContext(0);
-        delete d->vdec;
-        d->vdec = 0;
     }
     d->demuxer.unload();
     Q_EMIT durationChanged(0LL); // for ui, slider is invalid. use stopped instead, and remove this signal here?
@@ -1271,7 +1267,7 @@ void AVPlayer::stopFromDemuxerThread()
         /*
          * currently preload is not supported. so always unload. Then some properties will be reset, e.g. duration()
          */
-        unload(); //TODO: invoke?
+        QMetaObject::invokeMethod(this, "unload");
     } else {
         d->repeat_current++;
         QMetaObject::invokeMethod(this, "play"); //ensure play() is called from player thread
diff --git a/src/AVPlayerPrivate.cpp b/src/AVPlayerPrivate.cpp
index f6cde62..341925c 100644
--- a/src/AVPlayerPrivate.cpp
+++ b/src/AVPlayerPrivate.cpp
@@ -133,11 +133,11 @@ AVPlayer::Private::~Private() {
         ao = 0;
     }
     if (adec) {
-        delete adec;
+        adec->deleteLater();
         adec = 0;
     }
     if (vdec) {
-        delete vdec;
+        vdec->deleteLater();
         vdec = 0;
     }
     if (vos) {
@@ -349,7 +349,7 @@ bool AVPlayer::Private::setupAudioThread(AVPlayer *player)
     // TODO: no delete, just reset avctx and reopen
     if (adec) {
         adec->disconnect();
-        delete adec;
+        adec->deleteLater();
         adec = 0;
     }
     adec = AudioDecoder::create();
@@ -546,7 +546,7 @@ bool AVPlayer::Private::setupVideoThread(AVPlayer *player)
     }
     if (vdec) {
         vdec->disconnect();
-        delete vdec;
+        vdec->deleteLater();
         vdec = 0;
     }
     foreach(VideoDecoderId vid, vc_ids) {
diff --git a/src/QtAV/AVPlayer.h b/src/QtAV/AVPlayer.h
index 0dea54c..6f12767 100644
--- a/src/QtAV/AVPlayer.h
+++ b/src/QtAV/AVPlayer.h
@@ -595,7 +595,7 @@ private:
      * \brief unload
      * If the media is loading or loaded but not playing, unload it. Internall use only.
      */
-    void unload(); //TODO: private. call in stop() if not load() by user? or always unload() in stop()?
+    Q_INVOKABLE void unload(); //TODO: private. call in stop() if not load() by user? or always unload() in stop()?
     qint64 normalizedPosition(qint64 pos);
     class Private;
     QScopedPointer<Private> d;
diff --git a/src/codec/AVDecoder.cpp b/src/codec/AVDecoder.cpp
index 4c3fce6..687cea2 100644
--- a/src/codec/AVDecoder.cpp
+++ b/src/codec/AVDecoder.cpp
@@ -76,11 +76,16 @@ bool AVDecoder::open()
     const QString hwa = property("hwaccel").toString();
     AVCodec* codec = get_codec(codecName(), hwa, d.codec_ctx->codec_id);
     if (!codec) { // TODO: can be null for none-ffmpeg based decoders
-        QString es(tr("No codec could be found for '%1'"));
+        QString es = QStringLiteral("No codec could be found for '%1'");
         if (d.codec_name.isEmpty()) {
-            es = es.arg(QLatin1String(avcodec_get_name(d.codec_ctx->codec_id)));
-            if (!hwa.isEmpty())
-                es.append('_').append(hwa);
+            const char* tmpCodecName = avcodec_get_name(d.codec_ctx->codec_id);
+            if (!tmpCodecName) {
+                es = es.arg(QStringLiteral("unknown"));
+            } else {
+                es = es.arg(QString(tmpCodecName));
+                if (!hwa.isEmpty())
+                    es.append('_').append(hwa);
+            }
         } else {
             es = es.arg(d.codec_name);
         }
diff --git a/src/codec/video/VideoDecoderDXVA.cpp b/src/codec/video/VideoDecoderDXVA.cpp
index 64b12f3..a325982 100644
--- a/src/codec/video/VideoDecoderDXVA.cpp
+++ b/src/codec/video/VideoDecoderDXVA.cpp
@@ -314,9 +314,16 @@ QVector<GUID> VideoDecoderDXVAPrivate::getSupportedCodecs() const
     UINT input_count = 0;
     GUID *input_list = NULL;
     QVector<GUID> guids;
+
     DX_ENSURE_OK(vs->GetDecoderDeviceGuids(&input_count, &input_list), guids);
-    guids.resize(input_count);
-    memcpy(guids.data(), input_list, input_count*sizeof(GUID));
+
+    if (input_count < 1 || !input_list)
+        return guids;
+
+    for (UINT i = 0; i < input_count; ++i) {
+        guids.append(input_list[i]);
+    }
+
     CoTaskMemFree(input_list);
     return guids;
 }
