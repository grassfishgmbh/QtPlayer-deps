From 61be12a37d2b22252a04a3b802e6612ebbe814b0 Mon Sep 17 00:00:00 2001
From: Allan Sandfeld Jensen <allan.jensen@theqtcompany.com>
Date: Thu, 31 Mar 2016 15:38:13 +0200
Subject: [PATCH 1/1] Enable VAAPI acceleration on Linux

Chromium only enables hardware acceleration of JPEG and video on
ChromeOS. This patch enables VAAPI acceleration on Linux when
using the Qt toolkit.

Change-Id: I2360041aaba9966eb193dbddcc3f366805275af2
---
 .../renderer_host/media/video_capture_gpu_jpeg_decoder.cc     |  2 +-
 chromium/content/gpu/gpu_main.cc                              |  4 ++--
 chromium/content/public/common/content_switches.cc            |  2 +-
 chromium/content/public/common/content_switches.h             |  2 +-
 chromium/gpu/config/software_rendering_list_json.cc           | 11 -----------
 .../media/gpu/gpu_video_decode_accelerator_factory_impl.cc    |  8 ++++----
 .../media/gpu/gpu_video_decode_accelerator_factory_impl.h     |  2 +-
 chromium/media/gpu/ipc/service/gpu_jpeg_decode_accelerator.cc |  4 ++--
 chromium/media/media_gpu.gypi                                 |  4 ++--
 9 files changed, 14 insertions(+), 25 deletions(-)

diff --git a/chromium/content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc b/chromium/content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc
index 4937c3a..572fc0f 100644
--- a/chromium/content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc
+++ b/chromium/content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc
@@ -47,7 +47,7 @@ void VideoCaptureGpuJpegDecoder::Initialize() {
 
   base::AutoLock lock(lock_);
   bool is_platform_supported = false;
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))
   // Non-ChromeOS platforms do not support HW JPEG decode now. Do not establish
   // gpu channel to avoid introducing overhead.
   is_platform_supported = true;
diff --git a/chromium/content/gpu/gpu_main.cc b/chromium/content/gpu/gpu_main.cc
index 83660e0..808c91d 100644
--- a/chromium/content/gpu/gpu_main.cc
+++ b/chromium/content/gpu/gpu_main.cc
@@ -75,7 +75,7 @@
 #include "content/common/sandbox_mac.h"
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))) && defined(ARCH_CPU_X86_FAMILY)
 #include "media/gpu/vaapi_wrapper.h"
 #endif
 
@@ -257,7 +257,7 @@ int GpuMain(const MainFunctionParams& parameters) {
   GetGpuInfoFromCommandLine(gpu_info, command_line);
   gpu_info.in_process_gpu = false;
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))) && defined(ARCH_CPU_X86_FAMILY)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
diff --git a/chromium/content/public/common/content_switches.cc b/chromium/content/public/common/content_switches.cc
index 4383bb3..3ac6788 100644
--- a/chromium/content/public/common/content_switches.cc
+++ b/chromium/content/public/common/content_switches.cc
@@ -970,7 +970,7 @@ const char kEnableAggressiveDOMStorageFlushing[] =
 const char kDisableAudioSupportForDesktopShare[] =
     "disable-audio-support-for-desktop-share";
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))
 // Disables panel fitting (used for mirror mode).
 const char kDisablePanelFitting[]           = "disable-panel-fitting";
 
diff --git a/chromium/content/public/common/content_switches.h b/chromium/content/public/common/content_switches.h
index 75cc469..a1c1db8 100644
--- a/chromium/content/public/common/content_switches.h
+++ b/chromium/content/public/common/content_switches.h
@@ -282,7 +282,7 @@ CONTENT_EXPORT extern const char kRendererWaitForJavaDebugger[];
 CONTENT_EXPORT extern const char kEnableOSKOverscroll[];
 #endif
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))
 CONTENT_EXPORT extern const char kDisablePanelFitting[];
 CONTENT_EXPORT extern const char kDisableVaapiAcceleratedVideoEncode[];
 #endif
diff --git a/chromium/gpu/config/software_rendering_list_json.cc b/chromium/gpu/config/software_rendering_list_json.cc
index 541d963..624d4e4 100644
--- a/chromium/gpu/config/software_rendering_list_json.cc
+++ b/chromium/gpu/config/software_rendering_list_json.cc
@@ -431,17 +431,6 @@ const char kSoftwareRenderingListJson[] = LONG_STRING_CONST(
       ]
     },
     {
-      "id": 48,
-      "description": "Accelerated video decode is unavailable on Linux",
-      "cr_bugs": [137247],
-      "os": {
-        "type": "linux"
-      },
-      "features": [
-        "accelerated_video_decode"
-      ]
-    },
-    {
       "id": 50,
       "description": "Disable VMware software renderer on older Mesa",
       "cr_bugs": [145531, 332596, 571899],
diff --git a/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.cc b/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.cc
index 0c5e76ef..c14ca07 100644
--- a/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.cc
+++ b/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.cc
@@ -14,7 +14,7 @@
 #include "media/gpu/dxva_video_decode_accelerator_win.h"
 #elif defined(OS_MACOSX)
 #include "media/gpu/vt_video_decode_accelerator_mac.h"
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_device.h"
 #include "media/gpu/v4l2_slice_video_decode_accelerator.h"
@@ -79,7 +79,7 @@ GpuVideoDecodeAcceleratorFactoryImpl::GetDecoderCapabilities(
 #if defined(OS_WIN)
   capabilities.supported_profiles =
       DXVAVideoDecodeAccelerator::GetSupportedProfiles();
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))
   VideoDecodeAccelerator::SupportedProfiles vda_profiles;
 #if defined(USE_V4L2_CODEC)
   vda_profiles = V4L2VideoDecodeAccelerator::GetSupportedProfiles();
@@ -131,7 +131,7 @@ GpuVideoDecodeAcceleratorFactoryImpl::CreateVDA(
     &GpuVideoDecodeAcceleratorFactoryImpl::CreateV4L2VDA,
     &GpuVideoDecodeAcceleratorFactoryImpl::CreateV4L2SVDA,
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))) && defined(ARCH_CPU_X86_FAMILY)
     &GpuVideoDecodeAcceleratorFactoryImpl::CreateVaapiVDA,
 #endif
 #if defined(OS_MACOSX)
@@ -199,7 +199,7 @@ GpuVideoDecodeAcceleratorFactoryImpl::CreateV4L2SVDA(
 }
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))) && defined(ARCH_CPU_X86_FAMILY)
 std::unique_ptr<VideoDecodeAccelerator>
 GpuVideoDecodeAcceleratorFactoryImpl::CreateVaapiVDA(
     const gpu::GpuDriverBugWorkarounds& workarounds,
diff --git a/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.h b/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.h
index faa01d3..cf671e8 100644
--- a/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.h
+++ b/chromium/media/gpu/gpu_video_decode_accelerator_factory_impl.h
@@ -101,7 +101,7 @@ class MEDIA_GPU_EXPORT GpuVideoDecodeAcceleratorFactoryImpl {
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))) && defined(ARCH_CPU_X86_FAMILY)
   std::unique_ptr<VideoDecodeAccelerator> CreateVaapiVDA(
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
diff --git a/chromium/media/gpu/ipc/service/gpu_jpeg_decode_accelerator.cc b/chromium/media/gpu/ipc/service/gpu_jpeg_decode_accelerator.cc
index 3e2071f..7bf250e 100644
--- a/chromium/media/gpu/ipc/service/gpu_jpeg_decode_accelerator.cc
+++ b/chromium/media/gpu/ipc/service/gpu_jpeg_decode_accelerator.cc
@@ -25,7 +25,7 @@
 #include "media/gpu/ipc/common/media_messages.h"
 #include "ui/gfx/geometry/size.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))
 #if defined(ARCH_CPU_X86_FAMILY)
 #include "media/gpu/vaapi_jpeg_decode_accelerator.h"
 #endif
@@ -394,7 +394,7 @@ std::unique_ptr<JpegDecodeAccelerator> GpuJpegDecodeAccelerator::CreateV4L2JDA(
 std::unique_ptr<JpegDecodeAccelerator> GpuJpegDecodeAccelerator::CreateVaapiJDA(
     const scoped_refptr<base::SingleThreadTaskRunner>& io_task_runner) {
   std::unique_ptr<JpegDecodeAccelerator> decoder;
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(TOOLKIT_QT))) && defined(ARCH_CPU_X86_FAMILY)
   decoder.reset(new VaapiJpegDecodeAccelerator(io_task_runner));
 #endif
   return decoder;
diff --git a/chromium/media/media_gpu.gypi b/chromium/media/media_gpu.gypi
index cbd4afe..7dd6f0a 100644
--- a/chromium/media/media_gpu.gypi
+++ b/chromium/media/media_gpu.gypi
@@ -175,7 +175,7 @@
         },
       ],
     }],
-    ['chromeos==1', {
+    ['chromeos==1 or (OS=="linux" and use_qt==1)', {
       'sources': [
         'gpu/accelerated_video_decoder.h',
         'gpu/h264_decoder.cc',
@@ -231,7 +231,7 @@
         'gpu/tegra_v4l2_device.h',
       ],
     }],
-    ['target_arch != "arm" and chromeos == 1', {
+    ['(target_arch == "x64" or target_arch == "x86") and (chromeos == 1 or (OS=="linux" and use_qt==1))', {
       'dependencies': [
         '../media/media.gyp:media',
         '../third_party/libyuv/libyuv.gyp:libyuv',
-- 
2.7.4

